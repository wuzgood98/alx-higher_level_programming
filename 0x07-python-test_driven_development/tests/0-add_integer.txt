# 0-add_integer.txt
# Gideon O Addo

===========================
How to use 0-add_integer.py
===========================

add_integer:
    Import the `add_integer` function from the module containing it.
    >>> from your_module_name import add_integer

    Test that `add_integer` correctly adds two positive integers.
    >>> add_integer(1, 2)
    3

    Test that `add_integer` correctly adds a positive integer and a negative integer.
    >>> add_integer(1, -2)
    -1

    Test that `add_integer` correctly adds two negative integers.
    >>> add_integer(-1, -2)
    -3

    Test that `add_integer` correctly adds an integer and zero.
    >>> add_integer(1, 0)
    1

    Test that `add_integer` correctly adds zero and an integer.
    >>> add_integer(0, 2)
    2

    Test that `add_integer` correctly adds an integer and the default value of 98.
    >>> add_integer(2)
    100

    Test that `add_integer` correctly handles float arguments by typecasting them to integers before addition.
    >>> add_integer(1.5, 2.5)
    3
    >>> add_integer(1.5, 2)
    3
    >>> add_integer(1, 2.5)
    3

    Test that `add_integer` correctly raises a TypeError if either argument is not an integer or a float.
    >>> add_integer("10", 2)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer
    >>> add_integer(10, "2")
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer
    >>> add_integer(None, 2)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer
    >>> add_integer(10, [1, 2, 3])
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer
    >>> add_integer(10, (1, 2, 3))
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer
    >>> add_integer(10, {1, 2, 3})
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer
    >>> add_integer(10, {1: "one"})
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

    Test special cases of `float('nan')`, `float('inf')`, and `float('-inf')`.
    >>> add_integer(float('nan'), 1)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer
    >>> add_integer(1, float('nan'))
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer
    >>> add_integer(float('inf'), 1)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer
    >>> add_integer(1, float('inf'))
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer
    >>> add_integer(float('-inf'), 1)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer
    >>> add_integer(1, float('-inf'))
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

